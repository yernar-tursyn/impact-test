import React, { useState, useEffect } from 'react'
import confetti from 'canvas-confetti'

const Button = ({ onClick, disabled, children, className }) => (
  <button
    onClick={onClick}
    disabled={disabled}
    className={`px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50 ${className}`}
  >
    {children}
  </button>
)

const Card = ({ children, className }) => (
  <div className={`bg-white shadow-md rounded-lg overflow-hidden ${className}`}>
    {children}
  </div>
)

const CardHeader = ({ children }) => (
  <div className="px-6 py-4 border-b border-gray-200">{children}</div>
)

const CardContent = ({ children }) => (
  <div className="px-6 py-4">{children}</div>
)

const CardFooter = ({ children }) => (
  <div className="px-6 py-4 bg-gray-50">{children}</div>
)

const Progress = ({ value }) => (
  <div className="w-full bg-gray-200 rounded-full h-2.5">
    <div
      className="bg-blue-600 h-2.5 rounded-full"
      style={{ width: `${value}%` }}
    ></div>
  </div>
)

const RadioGroup = ({ children, onValueChange, value }) => (
  <div onChange={(e) => onValueChange(e.target.value)} className="space-y-2">
    {React.Children.map(children, (child) =>
      React.cloneElement(child, { selectedValue: value })
    )}
  </div>
)

const RadioGroupItem = ({ value, id, children, selectedValue }) => (
  <div className="flex items-center space-x-2">
    <input
      type="radio"
      id={id}
      value={value}
      name="radio-group"
      className="w-4 h-4"
      checked={selectedValue === value} // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º checked –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      onChange={() => {}} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    />
    <label htmlFor={id} className="text-sm font-medium leading-none">
      {children}
    </label>
  </div>
)

const tests = [
  {
    name: "–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ JavaScript",
    questions: [
      {
        question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –≤ JavaScript?",
        options: ["–§—É–Ω–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏", "–°–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", "–ú–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞", "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö"],
        correctAnswer: "–§—É–Ω–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏"
      },
      {
        question: "–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ç—Ä–æ–≥–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ JavaScript?",
        options: ["==", "===", "=", "!="],
        correctAnswer: "==="
      },
      {
        question: "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–º–∏—Å—ã –≤ JavaScript?",
        options: ["–°–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö", "–ú–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞", "–§—É–Ω–∫—Ü–∏—è –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞"],
        correctAnswer: "–°–ø–æ—Å–æ–± –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
      },
      {
        question: "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
        image: "/placeholder.svg?height=200&width=300",
        options: ["–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π (Event Loop)", "DOM-–¥–µ—Ä–µ–≤–æ", "–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤", "–ö—É—á–∞ (Heap)"],
        correctAnswer: "–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π (Event Loop)"
      }
    ]
  },
  {
    name: "–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ React",
    questions: [
      {
        question: "–ß—Ç–æ —Ç–∞–∫–æ–µ JSX?",
        options: ["–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ JavaScript", "–§—Ä–µ–π–º–≤–æ—Ä–∫", "–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä CSS"],
        correctAnswer: "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript"
      },
      {
        question: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ö—É–∫–∏ –≤ React?",
        options: ["–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π React", "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã React", "–ú–µ—Ç–æ–¥—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞", "–°—Ç–∏–ª–∏ CSS"],
        correctAnswer: "–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π React"
      },
      {
        question: "–ö–∞–∫ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫ –¥–æ—á–µ—Ä–Ω–µ–º—É?",
        options: ["–ß–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å—ã", "–ß–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ß–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç", "–ß–µ—Ä–µ–∑ Redux"],
        correctAnswer: "–ß–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å—ã"
      },
      {
        question: "–ö–∞–∫–æ–π —Ö—É–∫ React –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
        image: "/placeholder.svg?height=200&width=300",
        options: ["useState", "useEffect", "useContext", "useReducer"],
        correctAnswer: "useState"
      }
    ]
  },
  {
    name: "–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ CSS",
    questions: [
      {
        question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç CSS?",
        options: ["Cascading Style Sheets", "Computer Style Sheets", "Creative Style Sheets", "Colorful Style Sheets"],
        correctAnswer: "Cascading Style Sheets"
      },
      {
        question: "–ö–∞–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞?",
        options: ["color", "text-color", "font-color", "text-style"],
        correctAnswer: "color"
      },
      {
        question: "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ CSS?",
        options: ["–®–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", "–¢–µ–≥ HTML", "–°–≤–æ–π—Å—Ç–≤–æ CSS", "–ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞"],
        correctAnswer: "–®–∞–±–ª–æ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
      },
      {
        question: "–ö–∞–∫–æ–π —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è CSS –∏–∑–æ–±—Ä–∞–∂–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?",
        image: "/placeholder.svg?height=200&width=300",
        options: ["Relative", "Absolute", "Fixed", "Static"],
        correctAnswer: "Absolute"
      }
    ]
  }
]

export default function Component() {
  const [currentTest, setCurrentTest] = useState(0)
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState(
    tests.map(test => Array(test.questions.length).fill('')) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
  )
  const [showResults, setShowResults] = useState(false)
  const [score, setScore] = useState(0)

  const handleAnswer = (answer) => {
    const newAnswers = [...answers]
    newAnswers[currentTest][currentQuestion] = answer
    setAnswers(newAnswers)
  }

  const handleNext = () => {
    if (currentQuestion < tests[currentTest].questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
    } else if (currentTest < tests.length - 1) {
      setCurrentTest(currentTest + 1)
      setCurrentQuestion(0)
    } else {
      calculateScore()
      setShowResults(true)
    }
  }

  const calculateScore = () => {
    let totalScore = 0
    tests.forEach((test, testIndex) => {
      test.questions.forEach((question, questionIndex) => {
        if (answers[testIndex][questionIndex] === question.correctAnswer) {
          totalScore++
        }
      })
    })
    setScore(totalScore)
  }

  useEffect(() => {
    if (showResults) {
      confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 }
      })
    }
  }, [showResults])

  const totalQuestions = tests.reduce((sum, test) => sum + test.questions.length, 0)
  const answeredQuestions = answers.flat().filter(Boolean).length
  const progress = (answeredQuestions / totalQuestions) * 100

  if (showResults) {
    return (
      <Card className="w-full max-w-2xl mx-auto">
        <CardHeader>
          <h2 className="text-2xl font-bold text-center">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h2>
        </CardHeader>
        <CardContent>
          <div className="text-center mb-6">
            <p className="text-3xl font-bold">–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {score} –∏–∑ {totalQuestions}</p>
            <p className="text-xl mt-2">
              –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {((score / totalQuestions) * 100).toFixed(2)}%
            </p>
          </div>
          {tests.map((test, testIndex) => (
            <div key={testIndex} className="mb-6">
              <h3 className="font-semibold text-xl mb-2">{test.name}</h3>
              {test.questions.map((question, questionIndex) => (
                <div key={questionIndex} className="mb-2">
                  <p className="font-medium">{question.question}</p>
                  {question.image && (
                    <div className="my-2">
                      <img src={question.image} alt="–í–æ–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º" width={300} height={200} />
                    </div>
                  )}
                  <p>–í–∞—à –æ—Ç–≤–µ—Ç: {answers[testIndex][questionIndex]}</p>
                  <p className={answers[testIndex][questionIndex] === question.correctAnswer ? "text-green-600" : "text-red-600"}>
                    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.correctAnswer}
                  </p>
                </div>
              ))}
            </div>
          ))}
        </CardContent>
        <CardFooter>
          <div className="w-full text-center">
            <div className="inline-block animate-bounce">üéâ</div>
            <p className="mt-2">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤!</p>
          </div>
        </CardFooter>
      </Card>
    )
  }

  const currentTestData = tests[currentTest]
  const currentQuestionData = currentTestData.questions[currentQuestion]

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <h2 className="text-2xl font-bold">{currentTestData.name}</h2>
        <Progress value={progress} />
        <p className="text-sm text-gray-500 mt-2">
          –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {currentTestData.questions.length}
        </p>
      </CardHeader>
      <CardContent>
        <h3 className="text-xl mb-4">{currentQuestionData.question}</h3>
        {currentQuestionData.image && (
          <div className="mb-4">
            <img src={currentQuestionData.image} alt="–í–æ–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º" width={300} height={200} />
          </div>
        )}
        <RadioGroup onValueChange={handleAnswer} value={answers[currentTest][currentQuestion]}>
          {currentQuestionData.options.map((option, index) => (
            <RadioGroupItem key={index} value={option} id={`option-${index}`}>
              {option}
            </RadioGroupItem>
          ))}
        </RadioGroup>
      </CardContent>
      <CardFooter>
        <Button onClick={handleNext} disabled={!answers[currentTest][currentQuestion]} className="w-full">
          {currentTest < tests.length - 1 || currentQuestion < currentTestData.questions.length - 1 ? '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç—ã'}
        </Button>
      </CardFooter>
    </Card>
  )
}
